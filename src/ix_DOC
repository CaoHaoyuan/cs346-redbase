CS 346 : Redbase Part 2 (IX)
The Indexing Component

--------------------------------------------

** AUTHOR **
Aditya Bhandari (adityasb@stanford.edu)

Assistance taken:
1) Jaeho Shin (TA) :
    - Ideas to support parallel scan and delete operations
    - Help to debug valgrind memory errors

--------------------------------------------
--------------------------------------------

** DESIGN **

* Enums *
1) Node type - IX_NodeType (in "ix_internal.h")
    - ROOT, NODE, LEAF, ROOT_LEAF

2) Value entry type - IX_ValueType (in "ix_internal.h")
    - EMPTY, PAGE_ONLY, RID_FILLED

-------------------

* Data Structures *

1) Index file header - IX_IndexHeader (in "ix.h")
Stores the following:
    - Attribute type for the index - AttrType
    - Attribute length - integer
    - Page number of the B+ Tree root - PageNum
    - Degree of a node in the B+ Tree - integer

2) Index entry - IX_Entry (in "ix.h")
Stores the following:
    - Value of the key - void*
    - RID

3) Node Value - IX_NodeValue (in "ix_internal.h")
Stores the following:
    - Current state of the node value - IX_ValueType
    - RID of a record - RID
    - Page number of the next page - PageNum

4) Node page header - IX_NodeHeader (in "ix_internal.h")
Stores the following:
    - Number of keys in the node - integer
    - Number of keys the node can accommodate - integer
    - Type of the node - IX_NodeType
    - Parent node - PageNum
    - Left sibling node - PageNum

5) Bucket page header - IX_BucketPageHeader (in "ix_internal.h")
Stores the following:
    - Number of records in the bucket - integer
    - Maximum number of records - integer
    - Page number of the parent node - PageNum

-------------------

* Page headers *

The index file header is stored as the first page of the index file. It consists of the
type and length of the index attribute, the page number of the root page and the degree of
the nodes in the tree.

Each node is stored on a page. The node page header stores the number of keys currently in the
node, the capacity of the node, the type of the node, its parent and left sibling nodes (if they exist).
Each node consists of 'degree' number of keys and 'degree'+1 node values. In internal nodes,
the node value consists of the page number of the next node. In leaf nodes, the node value
consists of RID and the bucket page if it exists.

The overflow bucket for each entry is stored on a different page. The bucket page header
consists of the number of RIDs currently in the bucket, the capacity of the bucket and the page
number of the parent node.

-------------------

* Insertion in the index *

The key to be inserted in the index is first searched (using a recursive search function) in
the tree. If the same key and the same RID exists, insertion throws an error. If the same key
exists, the duplicate entry is inserted in the bucket page. If the key does not exist, the key
and the RID are inserted in the appropriate leaf node.
When a node becomes full, the node is split into 2 nodes and the first key from the right node
is copied (in case of leaf nodes) or pushed (in case of internal nodes) up to the parent node.
When the root node becomes full, it is split into 2 nodes and a new root node is allocated.

-------------------

* Scanning the index *

When the scan is opened, the page number and key position of the first entry that matches the
scan is stored in the IndexScan object. When the GetNextEntry() method is called, the first
entry is returned and the last scanned entry is updated. When the last scanned entry is not
null, the next record is first searched in the GetNextEntry() method. The last deleted entry is
also checked with the last scanned entry to adjust the position of the next record
appropriately.

-------------------

* Deletion from the index *

I have implemented the lazy delete operation. In this approach, a node is only deleted from the
tree when it becomes completely empty. Even if a delete causes a leaf node to become less than
half full, no redistribution or node merging takes place. When a leaf node becomes empty, it is
deleted from the tree and the deletion is pushed up to the parent node.
In case of duplicate keys, if the delete operation deletes the RID in the leaf node, the last
RID from the bucket page is copied to the leaf node. If the bucket page becomes empty, it is
disposed off and the bucket page pointer in the leaf node is set to NULL.
The last entry that was deleted is stored in a class variable 'lastEntryDeleted' in order to
implement parallel scan and delete operations correctly.

--------------------------------------------
--------------------------------------------

** IMPLEMENTATION DETAILS **

The algorithms used for implementing the important methods of the classes are described
as comment headers in the code files itself.

The code files are:
    - ix.h
    - ix_internal.h
    - ix_manager.cc
    - ix_indexhandle.cc
    - ix_indexscan.cc
    - ix_error.cc

--------------------------------------------
--------------------------------------------

** TESTING **

In addition to the 3 tests initially in the test suite for INT, I added similar tests to check the parts of the IX component for FLOAT and STRING.
The tests are as follows:
(N = 4000)
(All tests are for INT, FLOAT, STRING)

* Test1 (Simple) *
    1) Create an index file
    2) Open the index file
    3) Close the index file
    4) Destroy the index file

* Test2 (Insert and Verify entries) *
    1) Create an index file
    2) Open the index file
    3) Insert N entries in the index
    4) Verify the N entries in the index
    5) Close the index file
    6) Destroy the index file

* Test5 (Insert, Delete and Verify entries) *
    1) Create an index file
    2) Open the index file
    3) Insert N entries in the index
    4) Delete 0.8 N entries from the index
    5) Verify the remaining entries in the index
    6) Close the index file
    7) Destroy the index file


--------------------------------------------xx EOF xx----------------------------------------
